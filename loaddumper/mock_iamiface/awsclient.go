// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/iam/iamiface (interfaces: IAMAPI)

package mock_iamiface

import (
	service "github.com/aws/aws-sdk-go/aws/service"
	iam "github.com/aws/aws-sdk-go/service/iam"
	gomock "github.com/golang/mock/gomock"
)

// Mock of IAMAPI interface
type MockIAMAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockIAMAPIRecorder
}

// Recorder for MockIAMAPI (not exported)
type _MockIAMAPIRecorder struct {
	mock *MockIAMAPI
}

func NewMockIAMAPI(ctrl *gomock.Controller) *MockIAMAPI {
	mock := &MockIAMAPI{ctrl: ctrl}
	mock.recorder = &_MockIAMAPIRecorder{mock}
	return mock
}

func (_m *MockIAMAPI) EXPECT() *_MockIAMAPIRecorder {
	return _m.recorder
}

func (_m *MockIAMAPI) AddClientIDToOpenIDConnectProvider(_param0 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "AddClientIDToOpenIDConnectProvider", _param0)
	ret0, _ := ret[0].(*iam.AddClientIDToOpenIDConnectProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddClientIDToOpenIDConnectProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddClientIDToOpenIDConnectProvider", arg0)
}

func (_m *MockIAMAPI) AddClientIDToOpenIDConnectProviderRequest(_param0 *iam.AddClientIDToOpenIDConnectProviderInput) (*service.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
	ret := _m.ctrl.Call(_m, "AddClientIDToOpenIDConnectProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AddClientIDToOpenIDConnectProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddClientIDToOpenIDConnectProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddClientIDToOpenIDConnectProviderRequest", arg0)
}

func (_m *MockIAMAPI) AddRoleToInstanceProfile(_param0 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "AddRoleToInstanceProfile", _param0)
	ret0, _ := ret[0].(*iam.AddRoleToInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddRoleToInstanceProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRoleToInstanceProfile", arg0)
}

func (_m *MockIAMAPI) AddRoleToInstanceProfileRequest(_param0 *iam.AddRoleToInstanceProfileInput) (*service.Request, *iam.AddRoleToInstanceProfileOutput) {
	ret := _m.ctrl.Call(_m, "AddRoleToInstanceProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AddRoleToInstanceProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddRoleToInstanceProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRoleToInstanceProfileRequest", arg0)
}

func (_m *MockIAMAPI) AddUserToGroup(_param0 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "AddUserToGroup", _param0)
	ret0, _ := ret[0].(*iam.AddUserToGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddUserToGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUserToGroup", arg0)
}

func (_m *MockIAMAPI) AddUserToGroupRequest(_param0 *iam.AddUserToGroupInput) (*service.Request, *iam.AddUserToGroupOutput) {
	ret := _m.ctrl.Call(_m, "AddUserToGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AddUserToGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AddUserToGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUserToGroupRequest", arg0)
}

func (_m *MockIAMAPI) AttachGroupPolicy(_param0 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachGroupPolicy", _param0)
	ret0, _ := ret[0].(*iam.AttachGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachGroupPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachGroupPolicy", arg0)
}

func (_m *MockIAMAPI) AttachGroupPolicyRequest(_param0 *iam.AttachGroupPolicyInput) (*service.Request, *iam.AttachGroupPolicyOutput) {
	ret := _m.ctrl.Call(_m, "AttachGroupPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AttachGroupPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachGroupPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachGroupPolicyRequest", arg0)
}

func (_m *MockIAMAPI) AttachRolePolicy(_param0 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.AttachRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachRolePolicy", arg0)
}

func (_m *MockIAMAPI) AttachRolePolicyRequest(_param0 *iam.AttachRolePolicyInput) (*service.Request, *iam.AttachRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "AttachRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AttachRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) AttachUserPolicy(_param0 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachUserPolicy", _param0)
	ret0, _ := ret[0].(*iam.AttachUserPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachUserPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachUserPolicy", arg0)
}

func (_m *MockIAMAPI) AttachUserPolicyRequest(_param0 *iam.AttachUserPolicyInput) (*service.Request, *iam.AttachUserPolicyOutput) {
	ret := _m.ctrl.Call(_m, "AttachUserPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.AttachUserPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) AttachUserPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachUserPolicyRequest", arg0)
}

func (_m *MockIAMAPI) ChangePassword(_param0 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	ret := _m.ctrl.Call(_m, "ChangePassword", _param0)
	ret0, _ := ret[0].(*iam.ChangePasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ChangePassword(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangePassword", arg0)
}

func (_m *MockIAMAPI) ChangePasswordRequest(_param0 *iam.ChangePasswordInput) (*service.Request, *iam.ChangePasswordOutput) {
	ret := _m.ctrl.Call(_m, "ChangePasswordRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ChangePasswordOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ChangePasswordRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangePasswordRequest", arg0)
}

func (_m *MockIAMAPI) CreateAccessKey(_param0 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAccessKey", _param0)
	ret0, _ := ret[0].(*iam.CreateAccessKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateAccessKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccessKey", arg0)
}

func (_m *MockIAMAPI) CreateAccessKeyRequest(_param0 *iam.CreateAccessKeyInput) (*service.Request, *iam.CreateAccessKeyOutput) {
	ret := _m.ctrl.Call(_m, "CreateAccessKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateAccessKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateAccessKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccessKeyRequest", arg0)
}

func (_m *MockIAMAPI) CreateAccountAlias(_param0 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAccountAlias", _param0)
	ret0, _ := ret[0].(*iam.CreateAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateAccountAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccountAlias", arg0)
}

func (_m *MockIAMAPI) CreateAccountAliasRequest(_param0 *iam.CreateAccountAliasInput) (*service.Request, *iam.CreateAccountAliasOutput) {
	ret := _m.ctrl.Call(_m, "CreateAccountAliasRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateAccountAliasOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateAccountAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccountAliasRequest", arg0)
}

func (_m *MockIAMAPI) CreateGroup(_param0 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateGroup", _param0)
	ret0, _ := ret[0].(*iam.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateGroup", arg0)
}

func (_m *MockIAMAPI) CreateGroupRequest(_param0 *iam.CreateGroupInput) (*service.Request, *iam.CreateGroupOutput) {
	ret := _m.ctrl.Call(_m, "CreateGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateGroupRequest", arg0)
}

func (_m *MockIAMAPI) CreateInstanceProfile(_param0 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateInstanceProfile", _param0)
	ret0, _ := ret[0].(*iam.CreateInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateInstanceProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstanceProfile", arg0)
}

func (_m *MockIAMAPI) CreateInstanceProfileRequest(_param0 *iam.CreateInstanceProfileInput) (*service.Request, *iam.CreateInstanceProfileOutput) {
	ret := _m.ctrl.Call(_m, "CreateInstanceProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateInstanceProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateInstanceProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstanceProfileRequest", arg0)
}

func (_m *MockIAMAPI) CreateLoginProfile(_param0 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateLoginProfile", _param0)
	ret0, _ := ret[0].(*iam.CreateLoginProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateLoginProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoginProfile", arg0)
}

func (_m *MockIAMAPI) CreateLoginProfileRequest(_param0 *iam.CreateLoginProfileInput) (*service.Request, *iam.CreateLoginProfileOutput) {
	ret := _m.ctrl.Call(_m, "CreateLoginProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateLoginProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateLoginProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoginProfileRequest", arg0)
}

func (_m *MockIAMAPI) CreateOpenIDConnectProvider(_param0 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateOpenIDConnectProvider", _param0)
	ret0, _ := ret[0].(*iam.CreateOpenIDConnectProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateOpenIDConnectProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOpenIDConnectProvider", arg0)
}

func (_m *MockIAMAPI) CreateOpenIDConnectProviderRequest(_param0 *iam.CreateOpenIDConnectProviderInput) (*service.Request, *iam.CreateOpenIDConnectProviderOutput) {
	ret := _m.ctrl.Call(_m, "CreateOpenIDConnectProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateOpenIDConnectProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateOpenIDConnectProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOpenIDConnectProviderRequest", arg0)
}

func (_m *MockIAMAPI) CreatePolicy(_param0 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "CreatePolicy", _param0)
	ret0, _ := ret[0].(*iam.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePolicy", arg0)
}

func (_m *MockIAMAPI) CreatePolicyRequest(_param0 *iam.CreatePolicyInput) (*service.Request, *iam.CreatePolicyOutput) {
	ret := _m.ctrl.Call(_m, "CreatePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreatePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreatePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePolicyRequest", arg0)
}

func (_m *MockIAMAPI) CreatePolicyVersion(_param0 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	ret := _m.ctrl.Call(_m, "CreatePolicyVersion", _param0)
	ret0, _ := ret[0].(*iam.CreatePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreatePolicyVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePolicyVersion", arg0)
}

func (_m *MockIAMAPI) CreatePolicyVersionRequest(_param0 *iam.CreatePolicyVersionInput) (*service.Request, *iam.CreatePolicyVersionOutput) {
	ret := _m.ctrl.Call(_m, "CreatePolicyVersionRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreatePolicyVersionOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreatePolicyVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePolicyVersionRequest", arg0)
}

func (_m *MockIAMAPI) CreateRole(_param0 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateRole", _param0)
	ret0, _ := ret[0].(*iam.CreateRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRole", arg0)
}

func (_m *MockIAMAPI) CreateRoleRequest(_param0 *iam.CreateRoleInput) (*service.Request, *iam.CreateRoleOutput) {
	ret := _m.ctrl.Call(_m, "CreateRoleRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateRoleOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateRoleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRoleRequest", arg0)
}

func (_m *MockIAMAPI) CreateSAMLProvider(_param0 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateSAMLProvider", _param0)
	ret0, _ := ret[0].(*iam.CreateSAMLProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateSAMLProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSAMLProvider", arg0)
}

func (_m *MockIAMAPI) CreateSAMLProviderRequest(_param0 *iam.CreateSAMLProviderInput) (*service.Request, *iam.CreateSAMLProviderOutput) {
	ret := _m.ctrl.Call(_m, "CreateSAMLProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateSAMLProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateSAMLProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSAMLProviderRequest", arg0)
}

func (_m *MockIAMAPI) CreateUser(_param0 *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateUser", _param0)
	ret0, _ := ret[0].(*iam.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUser", arg0)
}

func (_m *MockIAMAPI) CreateUserRequest(_param0 *iam.CreateUserInput) (*service.Request, *iam.CreateUserOutput) {
	ret := _m.ctrl.Call(_m, "CreateUserRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateUserOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUserRequest", arg0)
}

func (_m *MockIAMAPI) CreateVirtualMFADevice(_param0 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVirtualMFADevice", _param0)
	ret0, _ := ret[0].(*iam.CreateVirtualMFADeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateVirtualMFADevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVirtualMFADevice", arg0)
}

func (_m *MockIAMAPI) CreateVirtualMFADeviceRequest(_param0 *iam.CreateVirtualMFADeviceInput) (*service.Request, *iam.CreateVirtualMFADeviceOutput) {
	ret := _m.ctrl.Call(_m, "CreateVirtualMFADeviceRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.CreateVirtualMFADeviceOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) CreateVirtualMFADeviceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVirtualMFADeviceRequest", arg0)
}

func (_m *MockIAMAPI) DeactivateMFADevice(_param0 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	ret := _m.ctrl.Call(_m, "DeactivateMFADevice", _param0)
	ret0, _ := ret[0].(*iam.DeactivateMFADeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeactivateMFADevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeactivateMFADevice", arg0)
}

func (_m *MockIAMAPI) DeactivateMFADeviceRequest(_param0 *iam.DeactivateMFADeviceInput) (*service.Request, *iam.DeactivateMFADeviceOutput) {
	ret := _m.ctrl.Call(_m, "DeactivateMFADeviceRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeactivateMFADeviceOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeactivateMFADeviceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeactivateMFADeviceRequest", arg0)
}

func (_m *MockIAMAPI) DeleteAccessKey(_param0 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteAccessKey", _param0)
	ret0, _ := ret[0].(*iam.DeleteAccessKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccessKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccessKey", arg0)
}

func (_m *MockIAMAPI) DeleteAccessKeyRequest(_param0 *iam.DeleteAccessKeyInput) (*service.Request, *iam.DeleteAccessKeyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteAccessKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteAccessKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccessKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccessKeyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteAccountAlias(_param0 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteAccountAlias", _param0)
	ret0, _ := ret[0].(*iam.DeleteAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccountAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccountAlias", arg0)
}

func (_m *MockIAMAPI) DeleteAccountAliasRequest(_param0 *iam.DeleteAccountAliasInput) (*service.Request, *iam.DeleteAccountAliasOutput) {
	ret := _m.ctrl.Call(_m, "DeleteAccountAliasRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteAccountAliasOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccountAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccountAliasRequest", arg0)
}

func (_m *MockIAMAPI) DeleteAccountPasswordPolicy(_param0 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteAccountPasswordPolicy", _param0)
	ret0, _ := ret[0].(*iam.DeleteAccountPasswordPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccountPasswordPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccountPasswordPolicy", arg0)
}

func (_m *MockIAMAPI) DeleteAccountPasswordPolicyRequest(_param0 *iam.DeleteAccountPasswordPolicyInput) (*service.Request, *iam.DeleteAccountPasswordPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteAccountPasswordPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteAccountPasswordPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteAccountPasswordPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccountPasswordPolicyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteGroup(_param0 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteGroup", _param0)
	ret0, _ := ret[0].(*iam.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroup", arg0)
}

func (_m *MockIAMAPI) DeleteGroupPolicy(_param0 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteGroupPolicy", _param0)
	ret0, _ := ret[0].(*iam.DeleteGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteGroupPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroupPolicy", arg0)
}

func (_m *MockIAMAPI) DeleteGroupPolicyRequest(_param0 *iam.DeleteGroupPolicyInput) (*service.Request, *iam.DeleteGroupPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteGroupPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteGroupPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteGroupPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroupPolicyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteGroupRequest(_param0 *iam.DeleteGroupInput) (*service.Request, *iam.DeleteGroupOutput) {
	ret := _m.ctrl.Call(_m, "DeleteGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroupRequest", arg0)
}

func (_m *MockIAMAPI) DeleteInstanceProfile(_param0 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteInstanceProfile", _param0)
	ret0, _ := ret[0].(*iam.DeleteInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteInstanceProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInstanceProfile", arg0)
}

func (_m *MockIAMAPI) DeleteInstanceProfileRequest(_param0 *iam.DeleteInstanceProfileInput) (*service.Request, *iam.DeleteInstanceProfileOutput) {
	ret := _m.ctrl.Call(_m, "DeleteInstanceProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteInstanceProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteInstanceProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInstanceProfileRequest", arg0)
}

func (_m *MockIAMAPI) DeleteLoginProfile(_param0 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteLoginProfile", _param0)
	ret0, _ := ret[0].(*iam.DeleteLoginProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteLoginProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoginProfile", arg0)
}

func (_m *MockIAMAPI) DeleteLoginProfileRequest(_param0 *iam.DeleteLoginProfileInput) (*service.Request, *iam.DeleteLoginProfileOutput) {
	ret := _m.ctrl.Call(_m, "DeleteLoginProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteLoginProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteLoginProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoginProfileRequest", arg0)
}

func (_m *MockIAMAPI) DeleteOpenIDConnectProvider(_param0 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteOpenIDConnectProvider", _param0)
	ret0, _ := ret[0].(*iam.DeleteOpenIDConnectProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteOpenIDConnectProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOpenIDConnectProvider", arg0)
}

func (_m *MockIAMAPI) DeleteOpenIDConnectProviderRequest(_param0 *iam.DeleteOpenIDConnectProviderInput) (*service.Request, *iam.DeleteOpenIDConnectProviderOutput) {
	ret := _m.ctrl.Call(_m, "DeleteOpenIDConnectProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteOpenIDConnectProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteOpenIDConnectProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOpenIDConnectProviderRequest", arg0)
}

func (_m *MockIAMAPI) DeletePolicy(_param0 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeletePolicy", _param0)
	ret0, _ := ret[0].(*iam.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePolicy", arg0)
}

func (_m *MockIAMAPI) DeletePolicyRequest(_param0 *iam.DeletePolicyInput) (*service.Request, *iam.DeletePolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeletePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeletePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeletePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePolicyRequest", arg0)
}

func (_m *MockIAMAPI) DeletePolicyVersion(_param0 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeletePolicyVersion", _param0)
	ret0, _ := ret[0].(*iam.DeletePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeletePolicyVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePolicyVersion", arg0)
}

func (_m *MockIAMAPI) DeletePolicyVersionRequest(_param0 *iam.DeletePolicyVersionInput) (*service.Request, *iam.DeletePolicyVersionOutput) {
	ret := _m.ctrl.Call(_m, "DeletePolicyVersionRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeletePolicyVersionOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeletePolicyVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePolicyVersionRequest", arg0)
}

func (_m *MockIAMAPI) DeleteRole(_param0 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteRole", _param0)
	ret0, _ := ret[0].(*iam.DeleteRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRole", arg0)
}

func (_m *MockIAMAPI) DeleteRolePolicy(_param0 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.DeleteRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRolePolicy", arg0)
}

func (_m *MockIAMAPI) DeleteRolePolicyRequest(_param0 *iam.DeleteRolePolicyInput) (*service.Request, *iam.DeleteRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteRoleRequest(_param0 *iam.DeleteRoleInput) (*service.Request, *iam.DeleteRoleOutput) {
	ret := _m.ctrl.Call(_m, "DeleteRoleRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteRoleOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteRoleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRoleRequest", arg0)
}

func (_m *MockIAMAPI) DeleteSAMLProvider(_param0 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSAMLProvider", _param0)
	ret0, _ := ret[0].(*iam.DeleteSAMLProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSAMLProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSAMLProvider", arg0)
}

func (_m *MockIAMAPI) DeleteSAMLProviderRequest(_param0 *iam.DeleteSAMLProviderInput) (*service.Request, *iam.DeleteSAMLProviderOutput) {
	ret := _m.ctrl.Call(_m, "DeleteSAMLProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteSAMLProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSAMLProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSAMLProviderRequest", arg0)
}

func (_m *MockIAMAPI) DeleteSSHPublicKey(_param0 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSSHPublicKey", _param0)
	ret0, _ := ret[0].(*iam.DeleteSSHPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSSHPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSSHPublicKey", arg0)
}

func (_m *MockIAMAPI) DeleteSSHPublicKeyRequest(_param0 *iam.DeleteSSHPublicKeyInput) (*service.Request, *iam.DeleteSSHPublicKeyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteSSHPublicKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteSSHPublicKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSSHPublicKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSSHPublicKeyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteServerCertificate(_param0 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteServerCertificate", _param0)
	ret0, _ := ret[0].(*iam.DeleteServerCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteServerCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteServerCertificate", arg0)
}

func (_m *MockIAMAPI) DeleteServerCertificateRequest(_param0 *iam.DeleteServerCertificateInput) (*service.Request, *iam.DeleteServerCertificateOutput) {
	ret := _m.ctrl.Call(_m, "DeleteServerCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteServerCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteServerCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteServerCertificateRequest", arg0)
}

func (_m *MockIAMAPI) DeleteSigningCertificate(_param0 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSigningCertificate", _param0)
	ret0, _ := ret[0].(*iam.DeleteSigningCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSigningCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSigningCertificate", arg0)
}

func (_m *MockIAMAPI) DeleteSigningCertificateRequest(_param0 *iam.DeleteSigningCertificateInput) (*service.Request, *iam.DeleteSigningCertificateOutput) {
	ret := _m.ctrl.Call(_m, "DeleteSigningCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteSigningCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteSigningCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSigningCertificateRequest", arg0)
}

func (_m *MockIAMAPI) DeleteUser(_param0 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteUser", _param0)
	ret0, _ := ret[0].(*iam.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUser", arg0)
}

func (_m *MockIAMAPI) DeleteUserPolicy(_param0 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteUserPolicy", _param0)
	ret0, _ := ret[0].(*iam.DeleteUserPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteUserPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUserPolicy", arg0)
}

func (_m *MockIAMAPI) DeleteUserPolicyRequest(_param0 *iam.DeleteUserPolicyInput) (*service.Request, *iam.DeleteUserPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteUserPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteUserPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteUserPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUserPolicyRequest", arg0)
}

func (_m *MockIAMAPI) DeleteUserRequest(_param0 *iam.DeleteUserInput) (*service.Request, *iam.DeleteUserOutput) {
	ret := _m.ctrl.Call(_m, "DeleteUserRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteUserOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUserRequest", arg0)
}

func (_m *MockIAMAPI) DeleteVirtualMFADevice(_param0 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVirtualMFADevice", _param0)
	ret0, _ := ret[0].(*iam.DeleteVirtualMFADeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteVirtualMFADevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVirtualMFADevice", arg0)
}

func (_m *MockIAMAPI) DeleteVirtualMFADeviceRequest(_param0 *iam.DeleteVirtualMFADeviceInput) (*service.Request, *iam.DeleteVirtualMFADeviceOutput) {
	ret := _m.ctrl.Call(_m, "DeleteVirtualMFADeviceRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DeleteVirtualMFADeviceOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DeleteVirtualMFADeviceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVirtualMFADeviceRequest", arg0)
}

func (_m *MockIAMAPI) DetachGroupPolicy(_param0 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachGroupPolicy", _param0)
	ret0, _ := ret[0].(*iam.DetachGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachGroupPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachGroupPolicy", arg0)
}

func (_m *MockIAMAPI) DetachGroupPolicyRequest(_param0 *iam.DetachGroupPolicyInput) (*service.Request, *iam.DetachGroupPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DetachGroupPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DetachGroupPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachGroupPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachGroupPolicyRequest", arg0)
}

func (_m *MockIAMAPI) DetachRolePolicy(_param0 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.DetachRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachRolePolicy", arg0)
}

func (_m *MockIAMAPI) DetachRolePolicyRequest(_param0 *iam.DetachRolePolicyInput) (*service.Request, *iam.DetachRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "DetachRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DetachRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) DetachUserPolicy(_param0 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachUserPolicy", _param0)
	ret0, _ := ret[0].(*iam.DetachUserPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachUserPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachUserPolicy", arg0)
}

func (_m *MockIAMAPI) DetachUserPolicyRequest(_param0 *iam.DetachUserPolicyInput) (*service.Request, *iam.DetachUserPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DetachUserPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.DetachUserPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) DetachUserPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachUserPolicyRequest", arg0)
}

func (_m *MockIAMAPI) EnableMFADevice(_param0 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableMFADevice", _param0)
	ret0, _ := ret[0].(*iam.EnableMFADeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) EnableMFADevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableMFADevice", arg0)
}

func (_m *MockIAMAPI) EnableMFADeviceRequest(_param0 *iam.EnableMFADeviceInput) (*service.Request, *iam.EnableMFADeviceOutput) {
	ret := _m.ctrl.Call(_m, "EnableMFADeviceRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.EnableMFADeviceOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) EnableMFADeviceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableMFADeviceRequest", arg0)
}

func (_m *MockIAMAPI) GenerateCredentialReport(_param0 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	ret := _m.ctrl.Call(_m, "GenerateCredentialReport", _param0)
	ret0, _ := ret[0].(*iam.GenerateCredentialReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GenerateCredentialReport(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateCredentialReport", arg0)
}

func (_m *MockIAMAPI) GenerateCredentialReportRequest(_param0 *iam.GenerateCredentialReportInput) (*service.Request, *iam.GenerateCredentialReportOutput) {
	ret := _m.ctrl.Call(_m, "GenerateCredentialReportRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GenerateCredentialReportOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GenerateCredentialReportRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateCredentialReportRequest", arg0)
}

func (_m *MockIAMAPI) GetAccessKeyLastUsed(_param0 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAccessKeyLastUsed", _param0)
	ret0, _ := ret[0].(*iam.GetAccessKeyLastUsedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccessKeyLastUsed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccessKeyLastUsed", arg0)
}

func (_m *MockIAMAPI) GetAccessKeyLastUsedRequest(_param0 *iam.GetAccessKeyLastUsedInput) (*service.Request, *iam.GetAccessKeyLastUsedOutput) {
	ret := _m.ctrl.Call(_m, "GetAccessKeyLastUsedRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetAccessKeyLastUsedOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccessKeyLastUsedRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccessKeyLastUsedRequest", arg0)
}

func (_m *MockIAMAPI) GetAccountAuthorizationDetails(_param0 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAccountAuthorizationDetails", _param0)
	ret0, _ := ret[0].(*iam.GetAccountAuthorizationDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountAuthorizationDetails(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountAuthorizationDetails", arg0)
}

func (_m *MockIAMAPI) GetAccountAuthorizationDetailsPages(_param0 *iam.GetAccountAuthorizationDetailsInput, _param1 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "GetAccountAuthorizationDetailsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) GetAccountAuthorizationDetailsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountAuthorizationDetailsPages", arg0, arg1)
}

func (_m *MockIAMAPI) GetAccountAuthorizationDetailsRequest(_param0 *iam.GetAccountAuthorizationDetailsInput) (*service.Request, *iam.GetAccountAuthorizationDetailsOutput) {
	ret := _m.ctrl.Call(_m, "GetAccountAuthorizationDetailsRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetAccountAuthorizationDetailsOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountAuthorizationDetailsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountAuthorizationDetailsRequest", arg0)
}

func (_m *MockIAMAPI) GetAccountPasswordPolicy(_param0 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAccountPasswordPolicy", _param0)
	ret0, _ := ret[0].(*iam.GetAccountPasswordPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountPasswordPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountPasswordPolicy", arg0)
}

func (_m *MockIAMAPI) GetAccountPasswordPolicyRequest(_param0 *iam.GetAccountPasswordPolicyInput) (*service.Request, *iam.GetAccountPasswordPolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetAccountPasswordPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetAccountPasswordPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountPasswordPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountPasswordPolicyRequest", arg0)
}

func (_m *MockIAMAPI) GetAccountSummary(_param0 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAccountSummary", _param0)
	ret0, _ := ret[0].(*iam.GetAccountSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountSummary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountSummary", arg0)
}

func (_m *MockIAMAPI) GetAccountSummaryRequest(_param0 *iam.GetAccountSummaryInput) (*service.Request, *iam.GetAccountSummaryOutput) {
	ret := _m.ctrl.Call(_m, "GetAccountSummaryRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetAccountSummaryOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetAccountSummaryRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountSummaryRequest", arg0)
}

func (_m *MockIAMAPI) GetCredentialReport(_param0 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	ret := _m.ctrl.Call(_m, "GetCredentialReport", _param0)
	ret0, _ := ret[0].(*iam.GetCredentialReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetCredentialReport(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCredentialReport", arg0)
}

func (_m *MockIAMAPI) GetCredentialReportRequest(_param0 *iam.GetCredentialReportInput) (*service.Request, *iam.GetCredentialReportOutput) {
	ret := _m.ctrl.Call(_m, "GetCredentialReportRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetCredentialReportOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetCredentialReportRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCredentialReportRequest", arg0)
}

func (_m *MockIAMAPI) GetGroup(_param0 *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "GetGroup", _param0)
	ret0, _ := ret[0].(*iam.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroup", arg0)
}

func (_m *MockIAMAPI) GetGroupPages(_param0 *iam.GetGroupInput, _param1 func(*iam.GetGroupOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "GetGroupPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) GetGroupPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupPages", arg0, arg1)
}

func (_m *MockIAMAPI) GetGroupPolicy(_param0 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetGroupPolicy", _param0)
	ret0, _ := ret[0].(*iam.GetGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetGroupPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupPolicy", arg0)
}

func (_m *MockIAMAPI) GetGroupPolicyRequest(_param0 *iam.GetGroupPolicyInput) (*service.Request, *iam.GetGroupPolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetGroupPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetGroupPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetGroupPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupPolicyRequest", arg0)
}

func (_m *MockIAMAPI) GetGroupRequest(_param0 *iam.GetGroupInput) (*service.Request, *iam.GetGroupOutput) {
	ret := _m.ctrl.Call(_m, "GetGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupRequest", arg0)
}

func (_m *MockIAMAPI) GetInstanceProfile(_param0 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceProfile", _param0)
	ret0, _ := ret[0].(*iam.GetInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetInstanceProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceProfile", arg0)
}

func (_m *MockIAMAPI) GetInstanceProfileRequest(_param0 *iam.GetInstanceProfileInput) (*service.Request, *iam.GetInstanceProfileOutput) {
	ret := _m.ctrl.Call(_m, "GetInstanceProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetInstanceProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetInstanceProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceProfileRequest", arg0)
}

func (_m *MockIAMAPI) GetLoginProfile(_param0 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "GetLoginProfile", _param0)
	ret0, _ := ret[0].(*iam.GetLoginProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetLoginProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLoginProfile", arg0)
}

func (_m *MockIAMAPI) GetLoginProfileRequest(_param0 *iam.GetLoginProfileInput) (*service.Request, *iam.GetLoginProfileOutput) {
	ret := _m.ctrl.Call(_m, "GetLoginProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetLoginProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetLoginProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLoginProfileRequest", arg0)
}

func (_m *MockIAMAPI) GetOpenIDConnectProvider(_param0 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "GetOpenIDConnectProvider", _param0)
	ret0, _ := ret[0].(*iam.GetOpenIDConnectProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetOpenIDConnectProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOpenIDConnectProvider", arg0)
}

func (_m *MockIAMAPI) GetOpenIDConnectProviderRequest(_param0 *iam.GetOpenIDConnectProviderInput) (*service.Request, *iam.GetOpenIDConnectProviderOutput) {
	ret := _m.ctrl.Call(_m, "GetOpenIDConnectProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetOpenIDConnectProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetOpenIDConnectProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOpenIDConnectProviderRequest", arg0)
}

func (_m *MockIAMAPI) GetPolicy(_param0 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPolicy", _param0)
	ret0, _ := ret[0].(*iam.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicy", arg0)
}

func (_m *MockIAMAPI) GetPolicyRequest(_param0 *iam.GetPolicyInput) (*service.Request, *iam.GetPolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicyRequest", arg0)
}

func (_m *MockIAMAPI) GetPolicyVersion(_param0 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPolicyVersion", _param0)
	ret0, _ := ret[0].(*iam.GetPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetPolicyVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicyVersion", arg0)
}

func (_m *MockIAMAPI) GetPolicyVersionRequest(_param0 *iam.GetPolicyVersionInput) (*service.Request, *iam.GetPolicyVersionOutput) {
	ret := _m.ctrl.Call(_m, "GetPolicyVersionRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetPolicyVersionOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicyVersionRequest", arg0)
}

func (_m *MockIAMAPI) GetRole(_param0 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	ret := _m.ctrl.Call(_m, "GetRole", _param0)
	ret0, _ := ret[0].(*iam.GetRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRole", arg0)
}

func (_m *MockIAMAPI) GetRolePolicy(_param0 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.GetRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRolePolicy", arg0)
}

func (_m *MockIAMAPI) GetRolePolicyRequest(_param0 *iam.GetRolePolicyInput) (*service.Request, *iam.GetRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) GetRoleRequest(_param0 *iam.GetRoleInput) (*service.Request, *iam.GetRoleOutput) {
	ret := _m.ctrl.Call(_m, "GetRoleRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetRoleOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetRoleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRoleRequest", arg0)
}

func (_m *MockIAMAPI) GetSAMLProvider(_param0 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "GetSAMLProvider", _param0)
	ret0, _ := ret[0].(*iam.GetSAMLProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetSAMLProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSAMLProvider", arg0)
}

func (_m *MockIAMAPI) GetSAMLProviderRequest(_param0 *iam.GetSAMLProviderInput) (*service.Request, *iam.GetSAMLProviderOutput) {
	ret := _m.ctrl.Call(_m, "GetSAMLProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetSAMLProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetSAMLProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSAMLProviderRequest", arg0)
}

func (_m *MockIAMAPI) GetSSHPublicKey(_param0 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetSSHPublicKey", _param0)
	ret0, _ := ret[0].(*iam.GetSSHPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetSSHPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSSHPublicKey", arg0)
}

func (_m *MockIAMAPI) GetSSHPublicKeyRequest(_param0 *iam.GetSSHPublicKeyInput) (*service.Request, *iam.GetSSHPublicKeyOutput) {
	ret := _m.ctrl.Call(_m, "GetSSHPublicKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetSSHPublicKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetSSHPublicKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSSHPublicKeyRequest", arg0)
}

func (_m *MockIAMAPI) GetServerCertificate(_param0 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "GetServerCertificate", _param0)
	ret0, _ := ret[0].(*iam.GetServerCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetServerCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServerCertificate", arg0)
}

func (_m *MockIAMAPI) GetServerCertificateRequest(_param0 *iam.GetServerCertificateInput) (*service.Request, *iam.GetServerCertificateOutput) {
	ret := _m.ctrl.Call(_m, "GetServerCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetServerCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetServerCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServerCertificateRequest", arg0)
}

func (_m *MockIAMAPI) GetUser(_param0 *iam.GetUserInput) (*iam.GetUserOutput, error) {
	ret := _m.ctrl.Call(_m, "GetUser", _param0)
	ret0, _ := ret[0].(*iam.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUser", arg0)
}

func (_m *MockIAMAPI) GetUserPolicy(_param0 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetUserPolicy", _param0)
	ret0, _ := ret[0].(*iam.GetUserPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetUserPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserPolicy", arg0)
}

func (_m *MockIAMAPI) GetUserPolicyRequest(_param0 *iam.GetUserPolicyInput) (*service.Request, *iam.GetUserPolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetUserPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetUserPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetUserPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserPolicyRequest", arg0)
}

func (_m *MockIAMAPI) GetUserRequest(_param0 *iam.GetUserInput) (*service.Request, *iam.GetUserOutput) {
	ret := _m.ctrl.Call(_m, "GetUserRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.GetUserOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) GetUserRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserRequest", arg0)
}

func (_m *MockIAMAPI) ListAccessKeys(_param0 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAccessKeys", _param0)
	ret0, _ := ret[0].(*iam.ListAccessKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAccessKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccessKeys", arg0)
}

func (_m *MockIAMAPI) ListAccessKeysPages(_param0 *iam.ListAccessKeysInput, _param1 func(*iam.ListAccessKeysOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAccessKeysPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListAccessKeysPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccessKeysPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListAccessKeysRequest(_param0 *iam.ListAccessKeysInput) (*service.Request, *iam.ListAccessKeysOutput) {
	ret := _m.ctrl.Call(_m, "ListAccessKeysRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListAccessKeysOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAccessKeysRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccessKeysRequest", arg0)
}

func (_m *MockIAMAPI) ListAccountAliases(_param0 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAccountAliases", _param0)
	ret0, _ := ret[0].(*iam.ListAccountAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAccountAliases(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccountAliases", arg0)
}

func (_m *MockIAMAPI) ListAccountAliasesPages(_param0 *iam.ListAccountAliasesInput, _param1 func(*iam.ListAccountAliasesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAccountAliasesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListAccountAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccountAliasesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListAccountAliasesRequest(_param0 *iam.ListAccountAliasesInput) (*service.Request, *iam.ListAccountAliasesOutput) {
	ret := _m.ctrl.Call(_m, "ListAccountAliasesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListAccountAliasesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAccountAliasesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAccountAliasesRequest", arg0)
}

func (_m *MockIAMAPI) ListAttachedGroupPolicies(_param0 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAttachedGroupPolicies", _param0)
	ret0, _ := ret[0].(*iam.ListAttachedGroupPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedGroupPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedGroupPolicies", arg0)
}

func (_m *MockIAMAPI) ListAttachedGroupPoliciesPages(_param0 *iam.ListAttachedGroupPoliciesInput, _param1 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAttachedGroupPoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListAttachedGroupPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedGroupPoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListAttachedGroupPoliciesRequest(_param0 *iam.ListAttachedGroupPoliciesInput) (*service.Request, *iam.ListAttachedGroupPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListAttachedGroupPoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListAttachedGroupPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedGroupPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedGroupPoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListAttachedRolePolicies(_param0 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAttachedRolePolicies", _param0)
	ret0, _ := ret[0].(*iam.ListAttachedRolePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedRolePolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedRolePolicies", arg0)
}

func (_m *MockIAMAPI) ListAttachedRolePoliciesPages(_param0 *iam.ListAttachedRolePoliciesInput, _param1 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAttachedRolePoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListAttachedRolePoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedRolePoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListAttachedRolePoliciesRequest(_param0 *iam.ListAttachedRolePoliciesInput) (*service.Request, *iam.ListAttachedRolePoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListAttachedRolePoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListAttachedRolePoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedRolePoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedRolePoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListAttachedUserPolicies(_param0 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAttachedUserPolicies", _param0)
	ret0, _ := ret[0].(*iam.ListAttachedUserPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedUserPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedUserPolicies", arg0)
}

func (_m *MockIAMAPI) ListAttachedUserPoliciesPages(_param0 *iam.ListAttachedUserPoliciesInput, _param1 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAttachedUserPoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListAttachedUserPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedUserPoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListAttachedUserPoliciesRequest(_param0 *iam.ListAttachedUserPoliciesInput) (*service.Request, *iam.ListAttachedUserPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListAttachedUserPoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListAttachedUserPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListAttachedUserPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAttachedUserPoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListEntitiesForPolicy(_param0 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "ListEntitiesForPolicy", _param0)
	ret0, _ := ret[0].(*iam.ListEntitiesForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListEntitiesForPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEntitiesForPolicy", arg0)
}

func (_m *MockIAMAPI) ListEntitiesForPolicyPages(_param0 *iam.ListEntitiesForPolicyInput, _param1 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListEntitiesForPolicyPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListEntitiesForPolicyPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEntitiesForPolicyPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListEntitiesForPolicyRequest(_param0 *iam.ListEntitiesForPolicyInput) (*service.Request, *iam.ListEntitiesForPolicyOutput) {
	ret := _m.ctrl.Call(_m, "ListEntitiesForPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListEntitiesForPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListEntitiesForPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEntitiesForPolicyRequest", arg0)
}

func (_m *MockIAMAPI) ListGroupPolicies(_param0 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListGroupPolicies", _param0)
	ret0, _ := ret[0].(*iam.ListGroupPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroupPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupPolicies", arg0)
}

func (_m *MockIAMAPI) ListGroupPoliciesPages(_param0 *iam.ListGroupPoliciesInput, _param1 func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListGroupPoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListGroupPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupPoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListGroupPoliciesRequest(_param0 *iam.ListGroupPoliciesInput) (*service.Request, *iam.ListGroupPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListGroupPoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListGroupPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroupPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupPoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListGroups(_param0 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListGroups", _param0)
	ret0, _ := ret[0].(*iam.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroups", arg0)
}

func (_m *MockIAMAPI) ListGroupsForUser(_param0 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	ret := _m.ctrl.Call(_m, "ListGroupsForUser", _param0)
	ret0, _ := ret[0].(*iam.ListGroupsForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroupsForUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupsForUser", arg0)
}

func (_m *MockIAMAPI) ListGroupsForUserPages(_param0 *iam.ListGroupsForUserInput, _param1 func(*iam.ListGroupsForUserOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListGroupsForUserPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListGroupsForUserPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupsForUserPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListGroupsForUserRequest(_param0 *iam.ListGroupsForUserInput) (*service.Request, *iam.ListGroupsForUserOutput) {
	ret := _m.ctrl.Call(_m, "ListGroupsForUserRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListGroupsForUserOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroupsForUserRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupsForUserRequest", arg0)
}

func (_m *MockIAMAPI) ListGroupsPages(_param0 *iam.ListGroupsInput, _param1 func(*iam.ListGroupsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListGroupsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupsPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListGroupsRequest(_param0 *iam.ListGroupsInput) (*service.Request, *iam.ListGroupsOutput) {
	ret := _m.ctrl.Call(_m, "ListGroupsRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListGroupsOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListGroupsRequest", arg0)
}

func (_m *MockIAMAPI) ListInstanceProfiles(_param0 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListInstanceProfiles", _param0)
	ret0, _ := ret[0].(*iam.ListInstanceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfiles(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfiles", arg0)
}

func (_m *MockIAMAPI) ListInstanceProfilesForRole(_param0 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	ret := _m.ctrl.Call(_m, "ListInstanceProfilesForRole", _param0)
	ret0, _ := ret[0].(*iam.ListInstanceProfilesForRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfilesForRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfilesForRole", arg0)
}

func (_m *MockIAMAPI) ListInstanceProfilesForRolePages(_param0 *iam.ListInstanceProfilesForRoleInput, _param1 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListInstanceProfilesForRolePages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfilesForRolePages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfilesForRolePages", arg0, arg1)
}

func (_m *MockIAMAPI) ListInstanceProfilesForRoleRequest(_param0 *iam.ListInstanceProfilesForRoleInput) (*service.Request, *iam.ListInstanceProfilesForRoleOutput) {
	ret := _m.ctrl.Call(_m, "ListInstanceProfilesForRoleRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListInstanceProfilesForRoleOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfilesForRoleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfilesForRoleRequest", arg0)
}

func (_m *MockIAMAPI) ListInstanceProfilesPages(_param0 *iam.ListInstanceProfilesInput, _param1 func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListInstanceProfilesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfilesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListInstanceProfilesRequest(_param0 *iam.ListInstanceProfilesInput) (*service.Request, *iam.ListInstanceProfilesOutput) {
	ret := _m.ctrl.Call(_m, "ListInstanceProfilesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListInstanceProfilesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListInstanceProfilesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceProfilesRequest", arg0)
}

func (_m *MockIAMAPI) ListMFADevices(_param0 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListMFADevices", _param0)
	ret0, _ := ret[0].(*iam.ListMFADevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListMFADevices(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListMFADevices", arg0)
}

func (_m *MockIAMAPI) ListMFADevicesPages(_param0 *iam.ListMFADevicesInput, _param1 func(*iam.ListMFADevicesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListMFADevicesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListMFADevicesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListMFADevicesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListMFADevicesRequest(_param0 *iam.ListMFADevicesInput) (*service.Request, *iam.ListMFADevicesOutput) {
	ret := _m.ctrl.Call(_m, "ListMFADevicesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListMFADevicesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListMFADevicesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListMFADevicesRequest", arg0)
}

func (_m *MockIAMAPI) ListOpenIDConnectProviders(_param0 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	ret := _m.ctrl.Call(_m, "ListOpenIDConnectProviders", _param0)
	ret0, _ := ret[0].(*iam.ListOpenIDConnectProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListOpenIDConnectProviders(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOpenIDConnectProviders", arg0)
}

func (_m *MockIAMAPI) ListOpenIDConnectProvidersRequest(_param0 *iam.ListOpenIDConnectProvidersInput) (*service.Request, *iam.ListOpenIDConnectProvidersOutput) {
	ret := _m.ctrl.Call(_m, "ListOpenIDConnectProvidersRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListOpenIDConnectProvidersOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListOpenIDConnectProvidersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOpenIDConnectProvidersRequest", arg0)
}

func (_m *MockIAMAPI) ListPolicies(_param0 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListPolicies", _param0)
	ret0, _ := ret[0].(*iam.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPolicies", arg0)
}

func (_m *MockIAMAPI) ListPoliciesPages(_param0 *iam.ListPoliciesInput, _param1 func(*iam.ListPoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListPoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListPoliciesRequest(_param0 *iam.ListPoliciesInput) (*service.Request, *iam.ListPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListPoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListPolicyVersions(_param0 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListPolicyVersions", _param0)
	ret0, _ := ret[0].(*iam.ListPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListPolicyVersions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPolicyVersions", arg0)
}

func (_m *MockIAMAPI) ListPolicyVersionsRequest(_param0 *iam.ListPolicyVersionsInput) (*service.Request, *iam.ListPolicyVersionsOutput) {
	ret := _m.ctrl.Call(_m, "ListPolicyVersionsRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListPolicyVersionsOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListPolicyVersionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPolicyVersionsRequest", arg0)
}

func (_m *MockIAMAPI) ListRolePolicies(_param0 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListRolePolicies", _param0)
	ret0, _ := ret[0].(*iam.ListRolePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListRolePolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolePolicies", arg0)
}

func (_m *MockIAMAPI) ListRolePoliciesPages(_param0 *iam.ListRolePoliciesInput, _param1 func(*iam.ListRolePoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListRolePoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListRolePoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolePoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListRolePoliciesRequest(_param0 *iam.ListRolePoliciesInput) (*service.Request, *iam.ListRolePoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListRolePoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListRolePoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListRolePoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolePoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListRoles(_param0 *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListRoles", _param0)
	ret0, _ := ret[0].(*iam.ListRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListRoles(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRoles", arg0)
}

func (_m *MockIAMAPI) ListRolesPages(_param0 *iam.ListRolesInput, _param1 func(*iam.ListRolesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListRolesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListRolesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListRolesRequest(_param0 *iam.ListRolesInput) (*service.Request, *iam.ListRolesOutput) {
	ret := _m.ctrl.Call(_m, "ListRolesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListRolesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListRolesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolesRequest", arg0)
}

func (_m *MockIAMAPI) ListSAMLProviders(_param0 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	ret := _m.ctrl.Call(_m, "ListSAMLProviders", _param0)
	ret0, _ := ret[0].(*iam.ListSAMLProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSAMLProviders(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSAMLProviders", arg0)
}

func (_m *MockIAMAPI) ListSAMLProvidersRequest(_param0 *iam.ListSAMLProvidersInput) (*service.Request, *iam.ListSAMLProvidersOutput) {
	ret := _m.ctrl.Call(_m, "ListSAMLProvidersRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListSAMLProvidersOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSAMLProvidersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSAMLProvidersRequest", arg0)
}

func (_m *MockIAMAPI) ListSSHPublicKeys(_param0 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	ret := _m.ctrl.Call(_m, "ListSSHPublicKeys", _param0)
	ret0, _ := ret[0].(*iam.ListSSHPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSSHPublicKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSSHPublicKeys", arg0)
}

func (_m *MockIAMAPI) ListSSHPublicKeysRequest(_param0 *iam.ListSSHPublicKeysInput) (*service.Request, *iam.ListSSHPublicKeysOutput) {
	ret := _m.ctrl.Call(_m, "ListSSHPublicKeysRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListSSHPublicKeysOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSSHPublicKeysRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSSHPublicKeysRequest", arg0)
}

func (_m *MockIAMAPI) ListServerCertificates(_param0 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListServerCertificates", _param0)
	ret0, _ := ret[0].(*iam.ListServerCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListServerCertificates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListServerCertificates", arg0)
}

func (_m *MockIAMAPI) ListServerCertificatesPages(_param0 *iam.ListServerCertificatesInput, _param1 func(*iam.ListServerCertificatesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListServerCertificatesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListServerCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListServerCertificatesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListServerCertificatesRequest(_param0 *iam.ListServerCertificatesInput) (*service.Request, *iam.ListServerCertificatesOutput) {
	ret := _m.ctrl.Call(_m, "ListServerCertificatesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListServerCertificatesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListServerCertificatesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListServerCertificatesRequest", arg0)
}

func (_m *MockIAMAPI) ListSigningCertificates(_param0 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListSigningCertificates", _param0)
	ret0, _ := ret[0].(*iam.ListSigningCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSigningCertificates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSigningCertificates", arg0)
}

func (_m *MockIAMAPI) ListSigningCertificatesPages(_param0 *iam.ListSigningCertificatesInput, _param1 func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListSigningCertificatesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListSigningCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSigningCertificatesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListSigningCertificatesRequest(_param0 *iam.ListSigningCertificatesInput) (*service.Request, *iam.ListSigningCertificatesOutput) {
	ret := _m.ctrl.Call(_m, "ListSigningCertificatesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListSigningCertificatesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListSigningCertificatesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSigningCertificatesRequest", arg0)
}

func (_m *MockIAMAPI) ListUserPolicies(_param0 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListUserPolicies", _param0)
	ret0, _ := ret[0].(*iam.ListUserPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListUserPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUserPolicies", arg0)
}

func (_m *MockIAMAPI) ListUserPoliciesPages(_param0 *iam.ListUserPoliciesInput, _param1 func(*iam.ListUserPoliciesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListUserPoliciesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListUserPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUserPoliciesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListUserPoliciesRequest(_param0 *iam.ListUserPoliciesInput) (*service.Request, *iam.ListUserPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "ListUserPoliciesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListUserPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListUserPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUserPoliciesRequest", arg0)
}

func (_m *MockIAMAPI) ListUsers(_param0 *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	ret := _m.ctrl.Call(_m, "ListUsers", _param0)
	ret0, _ := ret[0].(*iam.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUsers", arg0)
}

func (_m *MockIAMAPI) ListUsersPages(_param0 *iam.ListUsersInput, _param1 func(*iam.ListUsersOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListUsersPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUsersPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListUsersRequest(_param0 *iam.ListUsersInput) (*service.Request, *iam.ListUsersOutput) {
	ret := _m.ctrl.Call(_m, "ListUsersRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListUsersOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUsersRequest", arg0)
}

func (_m *MockIAMAPI) ListVirtualMFADevices(_param0 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListVirtualMFADevices", _param0)
	ret0, _ := ret[0].(*iam.ListVirtualMFADevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListVirtualMFADevices(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVirtualMFADevices", arg0)
}

func (_m *MockIAMAPI) ListVirtualMFADevicesPages(_param0 *iam.ListVirtualMFADevicesInput, _param1 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListVirtualMFADevicesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIAMAPIRecorder) ListVirtualMFADevicesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVirtualMFADevicesPages", arg0, arg1)
}

func (_m *MockIAMAPI) ListVirtualMFADevicesRequest(_param0 *iam.ListVirtualMFADevicesInput) (*service.Request, *iam.ListVirtualMFADevicesOutput) {
	ret := _m.ctrl.Call(_m, "ListVirtualMFADevicesRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ListVirtualMFADevicesOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ListVirtualMFADevicesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVirtualMFADevicesRequest", arg0)
}

func (_m *MockIAMAPI) PutGroupPolicy(_param0 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "PutGroupPolicy", _param0)
	ret0, _ := ret[0].(*iam.PutGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutGroupPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutGroupPolicy", arg0)
}

func (_m *MockIAMAPI) PutGroupPolicyRequest(_param0 *iam.PutGroupPolicyInput) (*service.Request, *iam.PutGroupPolicyOutput) {
	ret := _m.ctrl.Call(_m, "PutGroupPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.PutGroupPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutGroupPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutGroupPolicyRequest", arg0)
}

func (_m *MockIAMAPI) PutRolePolicy(_param0 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "PutRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.PutRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRolePolicy", arg0)
}

func (_m *MockIAMAPI) PutRolePolicyRequest(_param0 *iam.PutRolePolicyInput) (*service.Request, *iam.PutRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "PutRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.PutRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) PutUserPolicy(_param0 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "PutUserPolicy", _param0)
	ret0, _ := ret[0].(*iam.PutUserPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutUserPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutUserPolicy", arg0)
}

func (_m *MockIAMAPI) PutUserPolicyRequest(_param0 *iam.PutUserPolicyInput) (*service.Request, *iam.PutUserPolicyOutput) {
	ret := _m.ctrl.Call(_m, "PutUserPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.PutUserPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) PutUserPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutUserPolicyRequest", arg0)
}

func (_m *MockIAMAPI) RemoveClientIDFromOpenIDConnectProvider(_param0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveClientIDFromOpenIDConnectProvider", _param0)
	ret0, _ := ret[0].(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveClientIDFromOpenIDConnectProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveClientIDFromOpenIDConnectProvider", arg0)
}

func (_m *MockIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequest(_param0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*service.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	ret := _m.ctrl.Call(_m, "RemoveClientIDFromOpenIDConnectProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveClientIDFromOpenIDConnectProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveClientIDFromOpenIDConnectProviderRequest", arg0)
}

func (_m *MockIAMAPI) RemoveRoleFromInstanceProfile(_param0 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveRoleFromInstanceProfile", _param0)
	ret0, _ := ret[0].(*iam.RemoveRoleFromInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveRoleFromInstanceProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveRoleFromInstanceProfile", arg0)
}

func (_m *MockIAMAPI) RemoveRoleFromInstanceProfileRequest(_param0 *iam.RemoveRoleFromInstanceProfileInput) (*service.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
	ret := _m.ctrl.Call(_m, "RemoveRoleFromInstanceProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.RemoveRoleFromInstanceProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveRoleFromInstanceProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveRoleFromInstanceProfileRequest", arg0)
}

func (_m *MockIAMAPI) RemoveUserFromGroup(_param0 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveUserFromGroup", _param0)
	ret0, _ := ret[0].(*iam.RemoveUserFromGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveUserFromGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveUserFromGroup", arg0)
}

func (_m *MockIAMAPI) RemoveUserFromGroupRequest(_param0 *iam.RemoveUserFromGroupInput) (*service.Request, *iam.RemoveUserFromGroupOutput) {
	ret := _m.ctrl.Call(_m, "RemoveUserFromGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.RemoveUserFromGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) RemoveUserFromGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveUserFromGroupRequest", arg0)
}

func (_m *MockIAMAPI) ResyncMFADevice(_param0 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	ret := _m.ctrl.Call(_m, "ResyncMFADevice", _param0)
	ret0, _ := ret[0].(*iam.ResyncMFADeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ResyncMFADevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResyncMFADevice", arg0)
}

func (_m *MockIAMAPI) ResyncMFADeviceRequest(_param0 *iam.ResyncMFADeviceInput) (*service.Request, *iam.ResyncMFADeviceOutput) {
	ret := _m.ctrl.Call(_m, "ResyncMFADeviceRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.ResyncMFADeviceOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) ResyncMFADeviceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResyncMFADeviceRequest", arg0)
}

func (_m *MockIAMAPI) SetDefaultPolicyVersion(_param0 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	ret := _m.ctrl.Call(_m, "SetDefaultPolicyVersion", _param0)
	ret0, _ := ret[0].(*iam.SetDefaultPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) SetDefaultPolicyVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDefaultPolicyVersion", arg0)
}

func (_m *MockIAMAPI) SetDefaultPolicyVersionRequest(_param0 *iam.SetDefaultPolicyVersionInput) (*service.Request, *iam.SetDefaultPolicyVersionOutput) {
	ret := _m.ctrl.Call(_m, "SetDefaultPolicyVersionRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.SetDefaultPolicyVersionOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) SetDefaultPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDefaultPolicyVersionRequest", arg0)
}

func (_m *MockIAMAPI) UpdateAccessKey(_param0 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateAccessKey", _param0)
	ret0, _ := ret[0].(*iam.UpdateAccessKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAccessKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAccessKey", arg0)
}

func (_m *MockIAMAPI) UpdateAccessKeyRequest(_param0 *iam.UpdateAccessKeyInput) (*service.Request, *iam.UpdateAccessKeyOutput) {
	ret := _m.ctrl.Call(_m, "UpdateAccessKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateAccessKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAccessKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAccessKeyRequest", arg0)
}

func (_m *MockIAMAPI) UpdateAccountPasswordPolicy(_param0 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateAccountPasswordPolicy", _param0)
	ret0, _ := ret[0].(*iam.UpdateAccountPasswordPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAccountPasswordPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAccountPasswordPolicy", arg0)
}

func (_m *MockIAMAPI) UpdateAccountPasswordPolicyRequest(_param0 *iam.UpdateAccountPasswordPolicyInput) (*service.Request, *iam.UpdateAccountPasswordPolicyOutput) {
	ret := _m.ctrl.Call(_m, "UpdateAccountPasswordPolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateAccountPasswordPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAccountPasswordPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAccountPasswordPolicyRequest", arg0)
}

func (_m *MockIAMAPI) UpdateAssumeRolePolicy(_param0 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateAssumeRolePolicy", _param0)
	ret0, _ := ret[0].(*iam.UpdateAssumeRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAssumeRolePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssumeRolePolicy", arg0)
}

func (_m *MockIAMAPI) UpdateAssumeRolePolicyRequest(_param0 *iam.UpdateAssumeRolePolicyInput) (*service.Request, *iam.UpdateAssumeRolePolicyOutput) {
	ret := _m.ctrl.Call(_m, "UpdateAssumeRolePolicyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateAssumeRolePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateAssumeRolePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssumeRolePolicyRequest", arg0)
}

func (_m *MockIAMAPI) UpdateGroup(_param0 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateGroup", _param0)
	ret0, _ := ret[0].(*iam.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateGroup", arg0)
}

func (_m *MockIAMAPI) UpdateGroupRequest(_param0 *iam.UpdateGroupInput) (*service.Request, *iam.UpdateGroupOutput) {
	ret := _m.ctrl.Call(_m, "UpdateGroupRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateGroupOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateGroupRequest", arg0)
}

func (_m *MockIAMAPI) UpdateLoginProfile(_param0 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateLoginProfile", _param0)
	ret0, _ := ret[0].(*iam.UpdateLoginProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateLoginProfile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateLoginProfile", arg0)
}

func (_m *MockIAMAPI) UpdateLoginProfileRequest(_param0 *iam.UpdateLoginProfileInput) (*service.Request, *iam.UpdateLoginProfileOutput) {
	ret := _m.ctrl.Call(_m, "UpdateLoginProfileRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateLoginProfileOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateLoginProfileRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateLoginProfileRequest", arg0)
}

func (_m *MockIAMAPI) UpdateOpenIDConnectProviderThumbprint(_param0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateOpenIDConnectProviderThumbprint", _param0)
	ret0, _ := ret[0].(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateOpenIDConnectProviderThumbprint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateOpenIDConnectProviderThumbprint", arg0)
}

func (_m *MockIAMAPI) UpdateOpenIDConnectProviderThumbprintRequest(_param0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*service.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	ret := _m.ctrl.Call(_m, "UpdateOpenIDConnectProviderThumbprintRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateOpenIDConnectProviderThumbprintRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateOpenIDConnectProviderThumbprintRequest", arg0)
}

func (_m *MockIAMAPI) UpdateSAMLProvider(_param0 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateSAMLProvider", _param0)
	ret0, _ := ret[0].(*iam.UpdateSAMLProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSAMLProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSAMLProvider", arg0)
}

func (_m *MockIAMAPI) UpdateSAMLProviderRequest(_param0 *iam.UpdateSAMLProviderInput) (*service.Request, *iam.UpdateSAMLProviderOutput) {
	ret := _m.ctrl.Call(_m, "UpdateSAMLProviderRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateSAMLProviderOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSAMLProviderRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSAMLProviderRequest", arg0)
}

func (_m *MockIAMAPI) UpdateSSHPublicKey(_param0 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateSSHPublicKey", _param0)
	ret0, _ := ret[0].(*iam.UpdateSSHPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSSHPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSSHPublicKey", arg0)
}

func (_m *MockIAMAPI) UpdateSSHPublicKeyRequest(_param0 *iam.UpdateSSHPublicKeyInput) (*service.Request, *iam.UpdateSSHPublicKeyOutput) {
	ret := _m.ctrl.Call(_m, "UpdateSSHPublicKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateSSHPublicKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSSHPublicKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSSHPublicKeyRequest", arg0)
}

func (_m *MockIAMAPI) UpdateServerCertificate(_param0 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateServerCertificate", _param0)
	ret0, _ := ret[0].(*iam.UpdateServerCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateServerCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateServerCertificate", arg0)
}

func (_m *MockIAMAPI) UpdateServerCertificateRequest(_param0 *iam.UpdateServerCertificateInput) (*service.Request, *iam.UpdateServerCertificateOutput) {
	ret := _m.ctrl.Call(_m, "UpdateServerCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateServerCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateServerCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateServerCertificateRequest", arg0)
}

func (_m *MockIAMAPI) UpdateSigningCertificate(_param0 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateSigningCertificate", _param0)
	ret0, _ := ret[0].(*iam.UpdateSigningCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSigningCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSigningCertificate", arg0)
}

func (_m *MockIAMAPI) UpdateSigningCertificateRequest(_param0 *iam.UpdateSigningCertificateInput) (*service.Request, *iam.UpdateSigningCertificateOutput) {
	ret := _m.ctrl.Call(_m, "UpdateSigningCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateSigningCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateSigningCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSigningCertificateRequest", arg0)
}

func (_m *MockIAMAPI) UpdateUser(_param0 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateUser", _param0)
	ret0, _ := ret[0].(*iam.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUser", arg0)
}

func (_m *MockIAMAPI) UpdateUserRequest(_param0 *iam.UpdateUserInput) (*service.Request, *iam.UpdateUserOutput) {
	ret := _m.ctrl.Call(_m, "UpdateUserRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UpdateUserOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUserRequest", arg0)
}

func (_m *MockIAMAPI) UploadSSHPublicKey(_param0 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "UploadSSHPublicKey", _param0)
	ret0, _ := ret[0].(*iam.UploadSSHPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadSSHPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadSSHPublicKey", arg0)
}

func (_m *MockIAMAPI) UploadSSHPublicKeyRequest(_param0 *iam.UploadSSHPublicKeyInput) (*service.Request, *iam.UploadSSHPublicKeyOutput) {
	ret := _m.ctrl.Call(_m, "UploadSSHPublicKeyRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UploadSSHPublicKeyOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadSSHPublicKeyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadSSHPublicKeyRequest", arg0)
}

func (_m *MockIAMAPI) UploadServerCertificate(_param0 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "UploadServerCertificate", _param0)
	ret0, _ := ret[0].(*iam.UploadServerCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadServerCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadServerCertificate", arg0)
}

func (_m *MockIAMAPI) UploadServerCertificateRequest(_param0 *iam.UploadServerCertificateInput) (*service.Request, *iam.UploadServerCertificateOutput) {
	ret := _m.ctrl.Call(_m, "UploadServerCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UploadServerCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadServerCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadServerCertificateRequest", arg0)
}

func (_m *MockIAMAPI) UploadSigningCertificate(_param0 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "UploadSigningCertificate", _param0)
	ret0, _ := ret[0].(*iam.UploadSigningCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadSigningCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadSigningCertificate", arg0)
}

func (_m *MockIAMAPI) UploadSigningCertificateRequest(_param0 *iam.UploadSigningCertificateInput) (*service.Request, *iam.UploadSigningCertificateOutput) {
	ret := _m.ctrl.Call(_m, "UploadSigningCertificateRequest", _param0)
	ret0, _ := ret[0].(*service.Request)
	ret1, _ := ret[1].(*iam.UploadSigningCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockIAMAPIRecorder) UploadSigningCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadSigningCertificateRequest", arg0)
}
